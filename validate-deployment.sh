#!/bin/bash

# Script de Valida칞칚o do Deploy - Vale Cashback
# Verifica se tudo est치 funcionando corretamente no VPS

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}[九늏${NC} $1"
}

print_error() {
    echo -e "${RED}[九듛${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

echo "游댌 Validando deployment do Vale Cashback..."

# Verificar se a aplica칞칚o est치 rodando
if pm2 list | grep -q "valecashback.*online"; then
    print_success "Aplica칞칚o est치 rodando no PM2"
else
    print_error "Aplica칞칚o n칚o est치 rodando no PM2"
    exit 1
fi

# Verificar se a porta 3000 est치 sendo usada
if netstat -tlnp | grep -q ":3000"; then
    print_success "Porta 3000 est치 sendo usada"
else
    print_error "Porta 3000 n칚o est치 sendo usada"
    exit 1
fi

# Verificar conex칚o com PostgreSQL
if pg_isready -h localhost -p 5432 -U valecashback_user; then
    print_success "PostgreSQL est치 acess칤vel"
else
    print_error "PostgreSQL n칚o est치 acess칤vel"
    exit 1
fi

# Verificar se o banco valecashback existe
if psql -h localhost -U valecashback_user -d valecashback -c "SELECT 1;" > /dev/null 2>&1; then
    print_success "Banco de dados valecashback est치 acess칤vel"
else
    print_error "Banco de dados valecashback n칚o est치 acess칤vel"
    exit 1
fi

# Verificar se as tabelas principais existem
TABLES=("users" "merchants" "transactions" "cashbacks" "commission_settings")
for table in "${TABLES[@]}"; do
    if psql -h localhost -U valecashback_user -d valecashback -c "SELECT 1 FROM $table LIMIT 1;" > /dev/null 2>&1; then
        print_success "Tabela $table existe e est치 acess칤vel"
    else
        print_error "Tabela $table n칚o existe ou n칚o est치 acess칤vel"
        exit 1
    fi
done

# Verificar se h치 usu치rios no banco
USER_COUNT=$(psql -h localhost -U valecashback_user -d valecashback -t -c "SELECT COUNT(*) FROM users;" | xargs)
if [ "$USER_COUNT" -gt 0 ]; then
    print_success "Banco cont칠m $USER_COUNT usu치rios"
else
    print_warning "Banco n칚o cont칠m usu치rios - execute import-production-data.js"
fi

# Verificar se Nginx est치 rodando (se instalado)
if systemctl is-active --quiet nginx; then
    print_success "Nginx est치 rodando"
else
    print_warning "Nginx n칚o est치 rodando ou n칚o est치 instalado"
fi

# Verificar se firewall est치 ativo
if ufw status | grep -q "Status: active"; then
    print_success "Firewall UFW est치 ativo"
else
    print_warning "Firewall UFW n칚o est치 ativo"
fi

# Teste de requisi칞칚o HTTP local
if curl -f -s http://localhost:3000 > /dev/null; then
    print_success "Aplica칞칚o responde a requisi칞칫es HTTP locais"
else
    print_error "Aplica칞칚o n칚o responde a requisi칞칫es HTTP locais"
    exit 1
fi

# Verificar logs recentes por erros
if pm2 logs valecashback --lines 20 --nostream | grep -i error; then
    print_warning "Encontrados erros nos logs recentes"
else
    print_success "Nenhum erro cr칤tico encontrado nos logs recentes"
fi

# Verificar uso de mem칩ria
MEMORY_USAGE=$(pm2 show valecashback | grep "memory usage" | awk '{print $4}' | sed 's/[^0-9]//g')
if [ -n "$MEMORY_USAGE" ] && [ "$MEMORY_USAGE" -lt 500 ]; then
    print_success "Uso de mem칩ria est치 normal (${MEMORY_USAGE}MB)"
else
    print_warning "Uso de mem칩ria pode estar alto (${MEMORY_USAGE}MB)"
fi

echo ""
echo "游꿀 Valida칞칚o conclu칤da!"
echo ""
echo "游늵 Resumo do sistema:"
echo "- Usu치rios no banco: $USER_COUNT"
echo "- Aplica칞칚o: Online"
echo "- Banco de dados: Conectado"
echo "- Porta: 3000"
echo ""
echo "游님 Pr칩ximos passos:"
echo "1. Configure seu dom칤nio no Nginx"
echo "2. Gere certificado SSL com Let's Encrypt"
echo "3. Teste o acesso externo"
echo ""
echo "游깷 Aplica칞칚o local: http://localhost:3000"