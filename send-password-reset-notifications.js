/**
 * Script para enviar notifica√ß√µes sobre redefini√ß√£o de senha para todos os usu√°rios cadastrados
 */
import { Pool } from '@neondatabase/serverless';
import dotenv from 'dotenv';
import ws from 'ws';

dotenv.config();

// Configurar WebSocket para Neon
const neonConfig = {
  webSocketConstructor: ws
};

async function sendPasswordResetNotifications() {
  const pool = new Pool({ 
    connectionString: process.env.DATABASE_URL,
    ...neonConfig
  });
  
  try {
    console.log('üîÑ Iniciando envio de notifica√ß√µes sobre redefini√ß√£o de senha...');
    
    // Buscar todos os usu√°rios cadastrados
    const usersResult = await pool.query(`
      SELECT id, name, email, type, status 
      FROM users 
      WHERE status = 'active'
      ORDER BY type, name
    `);
    
    const users = usersResult.rows;
    console.log(`üìä Encontrados ${users.length} usu√°rios ativos no sistema`);
    
    let notificationsSent = 0;
    
    for (const user of users) {
      try {
        // Criar notifica√ß√£o personalizada baseada no tipo de usu√°rio
        let title, message;
        
        switch (user.type) {
          case 'admin':
            title = 'Nova Funcionalidade: Sistema de Redefini√ß√£o de Senha';
            message = 'Como administrador, voc√™ agora pode ajudar usu√°rios com problemas de acesso. O novo sistema de redefini√ß√£o de senha est√° dispon√≠vel em /password-reset. Tokens de redefini√ß√£o expiram em 1 hora e todas as a√ß√µes s√£o auditadas.';
            break;
            
          case 'merchant':
            title = 'Redefini√ß√£o de Senha Dispon√≠vel';
            message = 'Ol√°! Agora voc√™ pode redefinir sua senha facilmente se esquecer. Acesse /password-reset, insira seu email cadastrado e siga as instru√ß√µes. O token ser√° enviado como notifica√ß√£o no sistema e expira em 1 hora por seguran√ßa.';
            break;
            
          case 'client':
          default:
            title = 'Nova Funcionalidade: Redefinir Senha';
            message = 'Esqueceu sua senha? N√£o se preocupe! Agora voc√™ pode redefinir facilmente. Acesse /password-reset, digite seu email e voc√™ receber√° instru√ß√µes. O processo √© seguro e o link expira em 1 hora.';
            break;
        }
        
        // Inserir notifica√ß√£o no banco
        await pool.query(`
          INSERT INTO system_notifications (user_id, type, title, message, is_read, metadata)
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          user.id,
          'welcome',
          title,
          message,
          false,
          JSON.stringify({
            feature: 'password_reset',
            user_type: user.type,
            sent_at: new Date().toISOString()
          })
        ]);
        
        notificationsSent++;
        console.log(`‚úÖ Notifica√ß√£o enviada para: ${user.name} (${user.email}) - ${user.type}`);
        
      } catch (error) {
        console.error(`‚ùå Erro ao enviar notifica√ß√£o para ${user.email}:`, error);
      }
    }
    
    console.log(`\nüéâ Processo conclu√≠do!`);
    console.log(`üìß ${notificationsSent} notifica√ß√µes enviadas com sucesso`);
    console.log(`üë• ${users.length} usu√°rios no total`);
    
    // Estat√≠sticas por tipo de usu√°rio
    const stats = users.reduce((acc, user) => {
      acc[user.type] = (acc[user.type] || 0) + 1;
      return acc;
    }, {});
    
    console.log(`\nüìä Distribui√ß√£o por tipo de usu√°rio:`);
    Object.entries(stats).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} usu√°rios`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro geral no script:', error);
  } finally {
    await pool.end();
  }
}

// Executar o script
sendPasswordResetNotifications();